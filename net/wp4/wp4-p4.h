/* Automatically generated by p4c-wp4 from openwifi_wp4.p4 on Mon Mar  7 07:33:27 2022
 */
#ifndef _P4_GEN_HEADER_
#define _P4_GEN_HEADER_

#define htonll(x) ((((uint64_t)htonl(x)) << 32) + htonl((x) >> 32))

#define TABLE_SIZE 1024
#define IDENT_CUTTOFF 55


#include <linux/types.h>

int wp4_packet_in(u8 *p_uc_data, u16 wp4_ul_size, u8 port);

enum wp4_action{
DROP,
PASS,
CPU,
};
struct wp4_input {
    u32 input_port; /* bit<32> */
};
struct wp4_output {
    enum wp4_action output_action; /* wp4_action */
};
struct rfFeatures_t {
    s64 timestamp; /* int<64> */
    s16 rssi; /* int<16> */
    s16 blank; /* int<16> */
    s16 len; /* int<16> */
    s16 rate_idx; /* int<16> */
    s32 phaseOffset; /* int<32> */
    s32 pilotOffset; /* int<32> */
    s32 magSq; /* int<32> */
    s32 aux_4; /* int<32> */
    u8 wp4_valid;
};
struct frameCtrl_t {
    u8 protoVer; /* bit<2> */
    u8 frameType; /* bit<2> */
    u8 subType; /* bit<4> */
    u8 toDS; /* bit<1> */
    u8 fromDS; /* bit<1> */
    u8 moreFrag; /* bit<1> */
    u8 retry; /* bit<1> */
    u8 pwrMgmt; /* bit<1> */
    u8 moreData; /* bit<1> */
    u8 protFrame; /* bit<1> */
    u8 order; /* bit<1> */
    u8 wp4_valid;
};
struct mac80211_t {
    u16 durID; /* bit<16> */
    u64 Addr1; /* macAddr_t */
    u64 Addr2; /* macAddr_t */
    u64 Addr3; /* macAddr_t */
    u16 seqCtrl; /* bit<16> */
    u64 Addr4; /* macAddr_t */
    u8 wp4_valid;
};
struct Headers_t {
    struct rfFeatures_t rfFeatures; /* rfFeatures_t */
    struct frameCtrl_t frameCtrl; /* frameCtrl_t */
    struct mac80211_t mac80211; /* mac80211_t */
};

struct swtch_lookup_tbl_key {
    u64 headers_mac80211_Addr2_class; /* headers.mac80211.Addr2_class */
    s32 headers_rfFeatures_magSq_max; /* headers.rfFeatures.magSq_max */
    s32 headers_rfFeatures_magSq_min; /* headers.rfFeatures.magSq_min */
    s32 headers_rfFeatures_pilotOffset_max; /* headers.rfFeatures.pilotOffset_max */
    s32 headers_rfFeatures_pilotOffset_min; /* headers.rfFeatures.pilotOffset_min */
    s32 headers_rfFeatures_phaseOffset_max; /* headers.rfFeatures.phaseOffset_max */
    s32 headers_rfFeatures_phaseOffset_min; /* headers.rfFeatures.phaseOffset_min */
    s16 headers_rfFeatures_rssi_max; /* headers.rfFeatures.rssi_max */
    s16 headers_rfFeatures_rssi_min; /* headers.rfFeatures.rssi_min */
    s16 headers_rfFeatures_rate_idx_exact; /* headers.rfFeatures.rate_idx_exact */
    u8 headers_frameCtrl_subType_exact; /* headers.frameCtrl.subType_exact */
    u8 headers_frameCtrl_frameType_exact; /* headers.frameCtrl.frameType_exact */
};

struct rule_scope {
    u8 headers_mac80211_Addr2_class;
    u8 headers_rfFeatures_magSq_max;
    u8 headers_rfFeatures_magSq_min;
    u8 headers_rfFeatures_pilotOffset_max;
    u8 headers_rfFeatures_pilotOffset_min;
    u8 headers_rfFeatures_phaseOffset_max;
    u8 headers_rfFeatures_phaseOffset_min;
    u8 headers_rfFeatures_rssi_max;
    u8 headers_rfFeatures_rssi_min;
    u8 headers_rfFeatures_rate_idx_exact;
    u8 headers_frameCtrl_subType_exact;
    u8 headers_frameCtrl_frameType_exact;
};

struct rule_metadata {
    u8 valid;
    u64 numerosity;
    u64 match_count;
    u64 correct_count;
    u64 accuracy;
    u64 fitness;
    u64 age;
};

struct wp4_map_def {
    u16 key_size;
    u16 value_size;
    u16 max_entries;
    u16 last_entry;
    time_t last_lookup;
    struct swtch_lookup_tbl_key key[65535];
    struct rule_scope scope[65535];
    struct rule_metadata rule_data[65535];
    u8 action[65535];
};

enum lookup_tbl_0_actions {
    swtch_ID_BAD_action,
    swtch_ID_GOOD_action,
    swtch_lookup_tbl_NoAction,
};

#endif
